// autoenemytank

// REQUIRED FOR EACH AUTOTANK:
// $target                       -- the path the tank will follow when set off
// $typeoftank                 -- the type of tank you want for if it explodes, option include:
//								   -panzer: hatch opens when blows up
//								   -empty_panzer: hatch does not open							   
//		                           -empty_turretless_tiger: special case
//		                           -panzer: has guys getting out
//		                           -empty_panzer_desert: no one gets out
//			                       -empty_tiger: no one gets out
//			                       -bridge_tiger: no one gets out, special case
//	   	                           -panzerwerfer: no one gets out
//		                           -empty_panzer_winter: no one gets out
//	  	                           -panzer_winter: has guys getting out
//	  	                           -empty_panzer_lowpoly: no one gets out, special case for distance
//		                           -empty_t34: no one gets out
//		                           -bridge_panzer: no one gets out
//		                           -berlin_panzer: has guys getting out


//chrissstrahl - modified for coop on 2019.08.24

/*
// Optional stuff:
//----------------------------------------------------------
1. $collision    : the script_model of the collision entity
		    (default: none)

2. $target          : path along which the truck will drive,  
		    (default: none)

3. $myenemy         : who the tank should try to kill

4. $health          : how much health for the tank

5. #speed	        : speed at which to drive
		    (default: 200)
		    
6. $passengermodel  : passenger model for the guys if they get out
			(default: various models depending on the tank, primarily germans)

13. #accel	        : acceleration
		    (default: 50)

14. #lookahead	    : how far ahead on the path the truck should aim
		    (usually can be left to default)
		    (default: 256)

16. #removewhendone : should we remove the truck and guys when it is done with it's path?
		    (default: 0)

18. #visiblebeforedrive : should the truck be visible before we tell it to drive?
		    (default: 0)

19. #takedamage : should the truck be immune to damage?
		    (default: 1)

20. #sighttrace : should the tank do a sight trace when determining if it should shoot?
		    (default: 1)

21. #turnspeed : speed the turret(s) rotate at.
		    (default: 160)

*/




main:
	if($autotanktrigger == NULL || $autotanktrigger == NIL)
	 End
			
	for(local.i = 1; local.i <= $autotanktrigger.size; local.i++){
		if ($autotanktrigger[local.i].target == NIL ||
			$autotanktrigger[local.i].target == NULL){
//dprintln "autotanktrigger has no target"  //chrissstrahl - disabled because it is printed in coop
			End
		}
		$autotanktrigger[local.i] triggerable
		waitthread init_autotanks_through $autotanktrigger[local.i].target
		$autotanktrigger[local.i] setthread StartTargets
	}

End



StartTargets:
	//level waittill prespawn
		thread  go_through_tanks self.target

		self delete


		/* 
		for (local.j=1; local.j<=$(self.target).size; local.j++)
		{
			$(self.target)[local.j] waitthread StartAutoTank
		}
		*/

End


go_through_tanks local.tanks:

	for(local.i = 1; local.i <= $(local.tanks).size; local.i++)
	{
		$(local.tanks)[local.i] thread StartAutoTank
	}
End

init_autotanks_through local.tanks:
	for(local.i = 1; local.i <= $(local.tanks).size; local.i++)
	{
		$(local.tanks)[local.i] thread init_autotanks
	}
End

init_autotanks:
//----------------------------------------------------------------------------

//----------------------------------------------------------------------------


	local.health				= 4000
	local.speed					= 200
	local.accel					= 50
	local.lookahead				= 256
	local.drivermodel			= "models/human/german_wehrmact_soldier"
	local.passengers			= 0
//	local.passengermodel		= "models/human/german_afrika_private"
	local.passengername			= self.targetname + "_passenger"
	local.passengergun			= "Mauser KAR 98K"
	local.passengerhealth		= 100
	local.stoponpain			= 0
	local.dontdropweapons		= 0
	local.removewhendone		= 0
	local.unloadwhendone		= 1
	local.visiblebeforedrive	= 0
	local.loadedbeforedrive		= 0
	local.takedamage			= 1
	local.sighttrace			= 1

	
	if (self.collide != NIL)
		self setcollisionentity self.collide
	else if (self.collision != NIL)
		self setcollisionentity self.collision
	else if (self.collisionent != NIL)
		self setcollisionentity self.collisionent
	//else  //chrissstrahl - disabled because it is printed in coop
		//dprintln "autotank has no collisionent"  //chrissstrahl - disabled because it is printed in coop
	

	if (self.speed == NIL)
		self.speed = local.speed

	if (self.accel == NIL)
		self.accel = local.accel

	if (self.lookahead == NIL)
		self.lookahead = local.lookahead

	if (self.passengers == NIL)
		self.passengers = local.passengers

//	if (self.passengermodel == NIL)
//		self.passengermodel = local.passengermodel

	if (self.passengername == NIL)
		self.passengername = local.passengername

	if (self.passengergun == NIL)
		self.passengergun = local.passengergun


	if (self.passengerhealth == NIL)
		self.passengerhealth = local.passengerhealth

	if (self.drivermodel == NIL)
		self.drivermodel = local.drivermodel

	if (self.health == NIL)
		self.health = local.health

	if (self.dontdropweapons == NIL)
		self.dontdropweapons = local.dontdropweapons

	if (self.removewhendone == NIL)
		self.removewhendone = local.removewhendone

	if (self.unloadwhendone == NIL)
		self.unloadwhendone = local.unloadwhendone

	if (self.visiblebeforedrive == NIL)
		self.visiblebeforedrive = local.visiblebeforedrive

	if (self.takedamage == NIL)
		self.takedamage = local.takedamage

	if (self.sighttrace == NIL)
		self.sighttrace = local.sighttrace

	
	self.gun = self QueryTurretSlotEntity 0
	self.gun2 = self QueryTurretSlotEntity 1


	if(self.visiblebeforedrive == 0)
	{
		self hide
		self.gun hide
		self.gun notsolid
		if(self.gun2 != NIL && self.gun2 != NULL)
		{
			self.gun2 hide
			self.gun2 notsolid
		}
		self notsolid
	}
	else
		self solid

	if (self.gun && self.turnspeed != NIL)
		self.gun turnSpeed self.turnspeed
	if (self.gun2 && self.turnSpeed != NIL)
		self.gun2 turnSpeed self.turnspeed

	self rendereffects "-shadow"

	if (self.takedamage == 1)
	{
		self takedamage
	}
	else
	{
		self nodamage
	}

	//self notsolid
	self removeondeath 0
	
	// start up the tanks...

	//chrissstrahl - keep in sp
	//if(level.gametype == 0){
		//level.playertanktarget = $player
	//}
end

StartAutoTank:
	// HACK FOR SHERMAN TO NOT ATTACK PLAYER IN E3l1
	// HACK HACK HACK!!!!!!!  To set a tank to not shoot at anything when spawned, you have to
	// explicitly set tank.myenemy = NULL
	if(self.myenemy == NIL && self.model == "models/vehicles/sherman_base.tik" )
		self.myenemy = NULL
	
	if(self.myenemy == NIL){
		self.myenemy = waitthread coop_selectPlayer self //chrissstrahl - coop, might need to be managed and not just hanled once
		
	}if(self.visiblebeforedrive == 0)
	{		
		self.gun show
		self.gun solid
		if (self.gun2 != NULL)
		{
			self.gun2 show
			self.gun2 solid
		}
		self show
		self solid
	}
	self thread AutoTankGo self.target self.speed self.typeoftank			
	
	// $tank2 thread TankGo $tank2_path 200 empty_panzer

	//level.tank_count = 0
	self thread AutoTankObjectiveCheck
	//$tank1 thread AutoTankObjectiveCheck
	//$tank2 thread AutoTankObjectiveCheck
end



//----------------------------------------------------------------------------
// This will set the tanks new target to whatever the first argument is.
// The 2nd argument is optional, and if it's given and is a "1", then the
// tank will first check to see if the player is in a vehicle or a turret,
// and if they are, fire at that instead. Note that if the player leaves the
// vehicle after the AimAt is called, the tank will continue to shoot the
// vehicle. Likewise if a player dives in a vehicle after it was just shooting
// at the player. To fix this, just call this function at whim or in a loop.
//----------------------------------------------------------------------------
AimAt local.newTarget local.checkForContainer:{
//----------------------------------------------------------------------------
	//[204] chrissstrahl - added NULL check for Entity
	if(!local.newTarget){
		println("global/autotank.scr::AimAt Parameter1 was NIL or NULL")
		end
	}
	if (local.checkForContainer == 1){
		if (local.newTarget.turret != NIL && local.newTarget.turret != NULL){
			local.newTarget = local.newTarget.turret
		}else if (local.newTarget.vehicle != NIL && local.newTarget.vehicle != NULL){
			local.newTarget = local.newTarget.vehicle
		}
	}
	
	self.gun setAimTarget local.newTarget
	self.myenemy = local.newTarget
}End

//----------------------------------------------------------------------
AutoTankObjectiveCheck:
//----------------------------------------------------------------------
	level.tank_count++
	self waittill death

	level.tank_count--
	local.return = 0
	if(level.tank_count == 0)
	   local.return  = 1
	
End

//----------------------------------------------------------------------
AutoTankGo local.path local.speed local.type:
//----------------------------------------------------------------------
	// hack fix
	// self.mytrigger waittill trigger
	local.path = self.target
	self thread enemy_autotank_think 0 local.type
	// self thread autodrive_path local.path local.speed
	self.driving = 1
	self.collisionent connect_paths
	self drive local.path self.speed self.accel 200 self.lookahead
	self waittill drive
	if (self)
	{
		self stop
		if (self.removewhendone == 1)
		{
			self remove self
		}
		self.driving = 0
	}


end	


autotank_stop_if_close:
	//chrissstrahl - make coop compatible
	local.player = waitexec coop_mod/replace.scr::player_closestTo self
	
	while ( (isAlive self) && local.player != NULL && !(vector_within self.origin local.player.origin 450) )
	{
		wait 1
	//	dprintln "z:         autotank stop if close: " self " is not close"	
		local.player = waitexec coop_mod/replace.scr::player_closestTo self //chrissstrahl
	}
	if !(isAlive self)
		end
	if (self.driving == 1)
		self stop
//		dprintln "z:         autotank stop if close: " self " is close. stopping."
end


//****************************************
enemy_autotank_think local.notattacking local.type:
	// dprintln "ENEMY_autotank"
	self.type = local.type 
	self rendereffects "-shadow"

	// make sure we only set health once...
	if ( self.health_set==NIL || self.health_set==0 )
	{
		self.health_set = 1
		
		self.start_health = self.health
		self.health = self.start_health
	}
	self removeondeath 0

	if(self.tank_stunned_time == NIL)
		self.tank_stunned_time = 10
//dprintln "z:          self.target " self.target  //chrissstrahl - disabled because it is printed in coop

   /*
	self.gun = self QueryTurretSlotEntity 0
	self.gun2 = self QueryTurretSlotEntity 1
	
	*/
	if (self.gun)
		self.gun nodamage
	if (self.gun2)
		self.gun2 nodamage
	if (level.sightdistance == NIL)
		level.sightdistance = 16000
		


	if (local.notattacking != 1){
		if(self.myenemy == NIL){// || self.myenemy == NULL)
			local.player = waitthread coop_selectPlayer self //chrissstrahl - coop, might need to be managed and not just hanled once//chrissstrahl - coop, might need to be managed and not just hanled once
			self.gun setAimTarget local.player
		}else
			{
//dprintln ( "myenemy!!!! " + self.myenemy)  //chrissstrahl - disabled because it is printed in coop
				self.gun setAimTarget self.myenemy
			}
		thread enemy_autotank_attack_loop self.gun
		self.attack_thread = parm.previousthread
		thread autotank_pain self.gun
		self.pain_thread = parm.previousthread
	}
	if(self.stopforplayer == 1)
		thread tank_stop_if_close

	if (self.death_thread==NULL || self.death_thread==NIL)
	{
		self thread TankExplodeOnDeath local.type
	}

end


//---------------------------------------------------------------------------------
TankExplodeOnDeath local.type:
//---------------------------------------------------------------------------------
	self.death_thread	= local

	self removeondeath 0
	self.type = local.type
	self rendereffects "-shadow"
	if ( self.health_set==NIL || self.health_set==0 )
	{
		self.health_set = 1
		self.start_health = (((randomint 3) + 1) * 400)
		self.health = self.start_health
	}
	self removeondeath 0

	self waittill death
//dprintln "z:         " self " is dead. self.start_health: " self.start_health  //chrissstrahl - disabled because it is printed in coop
	thread tank_killed

end

KillMe local.deadmodel:
	self.deadmodel = local.deadmodel
	self takedamage
	self damage $world 55000 $world (0 0 0) (0 0 0) (0 0 0) 0 9 0 0
End 

tank_killed local.swapmodel:
	self playsound explode_tank
	self stop
	self.driving = 0
	self.type = self.typeoftank
	local.do_collision = 1
	local.turretmodel = NIL
	local.type = self.type
	if(self.model == "models/vehicles/sherman_base.tik")
		self.typeoftank = "sherman"
	else if(self.model == "models/vehicles/tigertank_weak.tik")
		self.typeoftank = "empty_tiger"

	if (self.attack_thread)
		self.attack_thread delete
	if (self.pain_thread)
		self.pain_thread delete
//dprintln "z:          self.type: " self.type  //chrissstrahl - disabled because it is printed in coop
	switch (self.typeoftank)
	{
		case "empty_turretless_tiger":
			local.model = models/vehicles/tigertank_wot_d.tik
			break
		case "panzer_desert":
			local.collisionoffset = ( -24 4 0)
			local.model = models/vehicles/panzer_iv_d.tik
			break
		case "panzer":
			local.model = models/vehicles/panzer_iv_eud.tik
			local.get_out = 1
			local.anims[0] = panzer_exit_1
			local.anims[1] = panzer_exit_2
			local.anims[2] = panzer_exit_3
			break
		case "empty_panzer_desert":
			local.model = models/vehicles/Panzer_destroyed_lowpoly_base.tik
			local.turretmodel = models/vehicles/Panzer_destroyed_lowpoly_cannon.tik
			local.get_out = 0
			break
		case "empty_tiger":
			local.model = models/vehicles/tigertank_destroyed_base.tik
			local.turretmodel = models/vehicles/tigertank_destroyed_cannon.tik
			local.get_out = 0
			local.do_collision = 0
			break;
		case "bridge_tiger":
			// tiger tank that get's pushed into the bridge...
			local.model = models/vehicles/tigertank_destroyed_base.tik
			local.get_out = 0
			local.do_collision = 0
			break
		case "panzerwerfer":
			local.model = models/vehicles/Panzerwerfer_d_base.tik
			local.turretmodel = models/vehicles/Panzerwerfer_d_cannon.tik
			local.get_out = 0
			break;
		case "empty_panzer_winter":
			local.model = models/vehicles/PanzerIV_w_d_base.tik
			local.turretmodel = models/vehicles/PanzerIV_w_d_cannon.tik
			local.get_out = 0
			break;
		case "panzer_winter":
			local.model = models/vehicles/PanzerIV_w_d_base.tik
			local.turretmodel = models/vehicles/PanzerIV_w_d_cannon.tik
			local.get_out = 1
			local.anims[0] = panzer_exit_1
			local.anims[1] = panzer_exit_2
			local.anims[2] = panzer_exit_3
			break;
		case "empty_panzer_lowpoly":
			local.model = models/vehicles/panzer_destroyed_lowpoly_base.tik
			local.turretmodel = models/vehicles/panzer_destroyed_lowpoly_cannon.tik
			local.get_out = 0
//			local.do_collision = 0
			break;
		case "empty_t34":
			local.model = models/vehicles/t34_base_d.tik
			local.turretmodel = models/vehicles/t34_cannon_d.tik
			local.get_out = 0
//			local.do_collision = 0
			break;
		case "bridge_panzer":
			// tiger tank that get's pushed into the bridge...
			local.model = models/vehicles/Panzer_destroyed_lowpoly_base.tik
			local.get_out = 0
			local.do_collision = 0
			break
		case "berlin_panzer":
			local.model = models/vehicles/panzer_destroyed_lowpoly_base.tik
			local.turretmodel = models/vehicles/panzer_destroyed_lowpoly_cannon.tik
			local.get_out = 1
			local.anims[0] = tank_exit_1
			local.anims[1] = tank_exit_2
			local.anims[2] = tank_exit_3
			local.anims[3] = tank_exit_4
			break
		case "AB41":
			local.model = models/vehicles/It_V_AB41des.tik
			local.get_out = 0
			local.do_collision = 0
			break
		case "sherman":
			//iprintln "SO DO THE SHERMAN"
			local.model = vehicles/shermantank_damaged.tik
			local.turretmodel = vehicles/sherman_turret_main.tik
			local.secondturretmodel = vehicles/sherman_turret_mini.tik
			//local.model = models/vehicles/us_v_sherman_bustedtread.tik
			
			local.get_out = 0
			local.do_collision = 0
			break
		case "empty_carroP40":
			local.model = models/vehicles/It_V_CarroP40_Des.tik
			local.get_out = 0
			break
		default:
			local.model = models/vehicles/tigertank_destroyed_base.tik
			local.turretmodel = models/vehicles/tigertank_destroyed_cannon.tik
			local.get_out = 0
			local.anims[0] = tank_exit_1
			local.anims[1] = tank_exit_2
			local.anims[2] = tank_exit_3
			local.anims[3] = tank_exit_4
			break
	}

	if (self.deadmodel)
		local.model = self.deadmodel

	if (local.get_out == 0)
		thread timedFireAndSmoke (self.origin + ( 0 0 100 ))

	local.name = self
	local.angles = self.angles
	local.origin = self.origin

	if ( local.do_collision==1 )
		local.brushmodel = self.collision.brushmodel
	local.targetname = self.targetname

	//stop the smoke emitter that came from damage and start a temp emitter for the death model
	
	if (self.smoke)
	{
		self.smoke anim stop
		self.smoke = NIL
	}

	self anim temp_smoke
	self anim temp_sizzle
	
	self.gun = self QueryTurretSlotEntity 0
	self.gun2 = self QueryTurretSlotEntity 1

	if (self.gun)
		local.turretangles = self.gun.angles

	self thread spawn_fx models/emitters/explosion_tank.tik
//	wait 0.25  jsl--> these waits cause the t34 tank to disappear briefly...
	waitframe
	exec global/earthquake.scr .2 4 0 0
	//radiusdamage self.origin level.bomb_damage level.bomb_explosion_radius
	radiusdamage (self.origin + (0 0 200)) 800 400
	waitframe
//	wait .1   //wait for explosion fx to cover up the model swap  (jsl--> these waits cause the t34 tank to disappear briefly so I removed them...)
	if (self.gun)
	{
		self DetachTurretSlot 0
		self.gun remove
	}
	if (self.gun2)
	{
		self DetachTurretSlot 1
		self.gun2 remove
	}

	self remove

	if ( local.do_collision==1 )
	{
		local.collisionorigin = local.origin
		if (local.collisionoffset)
			local.collisionorigin = local.collisionorigin + local.collisionoffset

		local.collision = thread damaged_collision local.angles local.collisionorigin local.brushmodel
	}

	local.damaged = thread spawn_damaged_new local.model local.angles local.origin
	local.damaged.targetname = local.targetname

	local.damaged.smoke	= local.smoke

	//produce temporary smoke and burning sound
	local.damaged anim temp_smoke
	local.damaged anim temp_sizzle

	if ( local.collision != NIL )
	{
		local.damaged notsolid
		local.collision disconnect_paths
	}

	if ( local.turretmodel != NIL )
	{
		local.turretname = local.targetname + "_damaged_turret"
		local.damaged attachmodel local.turretmodel "turret0" 1 local.turretname
		local.turretname detach
		local.turretname.angles = local.turretangles
		if (local.get_out == 1)
			local.turretname thread tank_guys_get_out local.anims local.name local.type local.angles
	}
	else
	{
		if (local.get_out == 1)
			local.damaged thread tank_guys_get_out local.anims local.name local.type local.angles local.turretname
	}
	
end

timedFireAndSmoke local.origin local.fireTime local.smokeTime:
	if (local.fireTime == NIL || local.fireTime == NULL)
		local.fireTime = 15
	if (local.smokeTime == NIL || local.smokeTime == NULL)
		local.smokeTime = 15

	local.smoke = spawn "models/emitters/linger_smoke.tik"
	local.smoke.origin = local.origin
	wait 2
	//local.fire remove
	local.smokeTime -= 2
	if (local.smokeTime > 0)
		wait local.smokeTime
	local.smoke remove
end



tank_guys_get_out local.anims local.name local.type local.angles local.turretname:
	wait 3

	if (self.state != "open")
	{
		if(local.turretname)
			local.turretname anim open
		else
			self anim open
		self playsound tank_snd_dooropen
	}
	
	wait 1
	//self waittill animdone
	if (self.state != "open")
	{
		if(local.turretname)
			local.turretname anim open_idle
		else
			self anim open_idle
	
		self.state = "open"
	}

	//insert roberts random sorter here
	exec global/randomorder.scr local.anims

	for (local.i = 0; local.i < 4; local.i ++)
	{
		if ((randomint 100) <= 70)
		{
			if (local.anims[local.i]) 
			{
				waitthread tank_guy_spawn local.anims[local.i] local.name local.type local.angles
			}
		}
	}
end

tank_guy_spawn local.anim local.name local.type local.angles:
//dprintln "z:       spawning guy to get out " local.anim //chrissstrahl - disabled because it is printed in coop

	if(self.passengermodel == NULL || self.passengermodel == NIL)
		switch ( local.type )
		{
			case	panzer_winter:
				local.model_type = human/german_winter_Artillery-Crew
			break;

			default:
			local.temp = randomint 3
			if (local.temp == 0)
				local.model_type = human/german_panzer_grenadier
			if (local.temp == 1)
				local.model_type = human/german_panzer_obershutze
			if (local.temp == 2)
				local.model_type = human/german_panzer_tankcommander
			break;
		}	
	else
		local.model_type = self.passengermodel

	local.ent = spawn local.model_type
	local.ent.origin = self gettagposition "tag_start"

	if ( local.angles!=NIL )
		local.ent.angles = local.angles
	else
		local.ent.angles = self gettagangles "tag_start"

	local.ent noticescale 1
	local.ent sight 4500
	local.ent mindist 2024
	local.ent maxdist 2448
	local.ent leash 10000

	if (level.dontdropweapons == 1)
		local.ent dontdropweapons
	if(self.dontdropweapons == 1)
		local.ent dontdropweapons
	
	
	local.ent exec global/disable_ai.scr
	local.ent notsolid

//dprintln "z:         starting anim: " local.name " " local.anim //chrissstrahl - disabled because it is printed in coop
	local.ent anim_noclip local.anim
	local.ent waittill animdone
//dprintln "z:         ending   anim: " local.name " " local.anim //chrissstrahl - disabled because it is printed in coop

	if ( (local.anim == "tank_exit_2") || (local.anim == "panzer_exit_2") )
		local.ent.position = "crawl"
	if ( (local.anim == "tank_exit_3") || (local.anim == "panzer_exit_3") )
		local.ent.health = 45 
	if (local.anim == "tank_exit_4")
	{
		local.ent bedead
		end
	}

	wait .4
//dprintln "z:         making solid: " local.name " " local.anim  //chrissstrahl - disabled because it is printed in coop

	local.ent solid

//		wait 3
//dprintln "z:         enabling AI: " local.name " " local.anim //chrissstrahl - disabled because it is printed in coop

	local.ent exec global/enable_ai.scr
	local.ent attackplayer
end

//=========================================================================
autotank_pain local.gun local.relock_on_player:{
//=========================================================================
	local.previoushealth = self.health
	local.timer = 0
	self immune bash

	if ( local.relock_on_player==NIL ){
		local.relock_on_player	= 1
	}

	while(isAlive self){
		wait .1
		if ( (isAlive self) && (self.health < local.previoushealth) ){		
		 //chrissstrahl - disabled because it is printed in coop
			/*dprintln "z:         " self " is damaged. self.start_health: " self.start_health
			dprintln "z:         current health: " self.health
			dprintln "z:         previous health: " local.previoushealth
			dprintln "z:         " self " is stunned"*/

			self playsound damage_tank
			self.stunned = 1
			self.abortstun = 0
			local.gun setAimTarget NULL


			if (self.driving == 1){
				self modifydrive 5 100 256
			}
			if (self.driving_reverse == 1){
				self modifydrive -5 100 256
			}

		//	self.smoke = spawn script_model model "models/emitters/linger_smoke.tik"

			if ( self.smoke==NIL ){
				self.smoke = spawn "models/emitters/linger_smoke.tik"
				self.smoke notsolid
				self.smoke anim start
				self.smoke.origin = (self.origin + (0 0 80))
				self.smoke glue self
			}
			local.previoushealth = self.health
			local.timer = 0
		}

		if (local.timer == self.tank_stunned_time || (self.abortstun == 1)){
			if ( local.relock_on_target==1 ){
				if(self.myenemy == NIL){ // || self.myenemy == NULL)
					local.player = waitthread coop_selectPlayer self //chrissstrahl - coop, might need to be managed and not just hanled once//chrissstrahl - coop, might need to be managed and not just hanled once
					self.gun setAimTarget local.player
				}else{
//dprintln ( "myenemy!!!! " + self.myenemy) //chrissstrahl - disabled because it is printed in coop
					self.gun setAimTarget self.myenemy
				}
			}
			//level waittill prespawn
			if (self && self.driving == 1){
				self modifydrive self.speed 30 256
			}
			if (self && self.driving_reverse == 1){
				self modifydrive (0 - self.speed) 30 256
			}
			self.stunned = 0
			self.abortstun = 0
//dprintln "z:         " self " is no longer stunned"  //chrissstrahl - disabled because it is printed in coop
		}
		local.timer++
	}
}end

//=========================================================================
enemy_autotank_attack_loop local.gun:{    //self is the tank
//=========================================================================
	if ( self.paused==NIL )
		self.paused = 0

	local.waited = 0
	local.myenemy = self.myenemy
	
	while (IsAlive self){
		if(local.myenemy != self.myenemy){
			local.gun setAimTarget self.myenemy
			local.myenemy = self.myenemy
			local.myenemy = local.myenemy
		}	
		// get our gun on target 1st...
		// But don't wait if we are aiming at nothing
		if (local.myenemy != NULL)
			local.gun waittill ontarget

		if ( self.paused==0 && self.myenemy != NULL){
			local.gun waittill ontarget
			wait 0.25	// center on target for just a little..

			local.trace_offset = local.gun.origin + (0 0 48)
			if (self.stunned == 1){
//dprintln "z:             " self " is not firing because stunned"  //chrissstrahl - disabled because it is printed in coop
				wait 1
				local.waited = 1
			}
			else if !(vector_within self.myenemy.origin local.trace_offset level.sightdistance){		
//dprintln "z:             " self " is not firing because range"  //chrissstrahl - disabled because it is printed in coop
				wait 1
				local.waited = 1
			}
			else if ((self.sighttrace == 1) && !(sighttrace self.myenemy.origin local.trace_offset 1)){
//dprintln "z:             " self " is not firing because sight trace"  //chrissstrahl - disabled because it is printed in coop
				wait 1
				local.waited = 1
			}
			else{
//dprintln "z:         " self " on target, firing!"  //chrissstrahl - disabled because it is printed in coop
				// wait 3

				if ( local.waited==0 ){
					wait 2
					local.waited = 1
				}

				if (self.stunned != 1)
					local.gun anim fire

				wait 5
			}
		}
		else{
			wait 1
		}
	}
}end


//local.collision = thread damaged_collision local.angles local.origin local.brushmodel
//local.damaged = thread spawn_damaged_new local.model local.angles local.origin
//----------------------------------
spawn_damaged local.model:
	local.damaged = spawn script_model model local.model
	local.damaged.origin = self.origin
	local.damaged.angles = self.angles
	local.damaged notsolid
end local.damaged

spawn_damaged_new local.model local.angles local.origin:
	local.damaged = spawn script_model model local.model
	local.damaged.origin = local.origin
	local.damaged.angles = local.angles
end local.damaged

spawn_fx local.fx:
	local.temp = spawn script_model model local.fx
	local.temp notsolid
	local.temp.origin = self.origin
	local.temp anim start
	local.temp notsolid
	wait 5
	local.temp remove
end

damaged_collision local.angles local.origin local.brushmodel:
	local.collision = spawn script_object model local.brushmodel
	local.collision.origin = local.origin
	local.collision.angles = local.angles
	local.collision safesolid
end local.collision

//chrissstrahl - selects player to attack
coop_selectPlayer local.ent:{
	if(local.ent==NULL){ end NULL}
	local.player = waitexec coop_mod/replace.scr::player_closestTo local.ent //always returns a player(or null)
}end local.player

